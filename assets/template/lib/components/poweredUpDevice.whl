; @module Component/PUDevice
; @device I
; Wheel, copyright (c) 2020 - present by Arno van der Vegt
; Distributed under an MIT license: https://arnovandervegt.github.io/wheel/license.txt
namespace components.puDevice

; @const The button component module.
#define MODULE_COMPONENT_PU_DEVICE         128

; @const Module calls for button component functions.
#define PU_DEVICE_COMPONENT_SET_TYPE         0
#define PU_DEVICE_COMPONENT_SET_PORT         1
#define PU_DEVICE_COMPONENT_SET_SPEED        2
#define PU_DEVICE_COMPONENT_SET_VALUE        3
#define PU_DEVICE_COMPONENT_SET_READY        4
#define PU_DEVICE_COMPONENT_SET_COLOR_MODE   5

; @property name      string  The component name.
; @property hidden    boolean Hide the component.
; @property x         number  The left position of the component inside the parent component.
; @property y         number  The top position of the component inside the parent component.
; @property zIndex    number  The depth of the component related to other components in the parent.
; @property port      list    A list of selectable ports, options are: `1`, `2`, `3` or `4`.
; @property device    list    A list of sensor types, options are: `Basic motor`, `Train motor`, `Led lights`, `Tacho motor`, `Move hub motor`, `Ctrl+ L motor`, `Ctrl+ XL motor` or `Distance sensor`.
; @property colorMode boolean If this option is selected and the input type is `Distance sensor` then the value will be displayed as a color instead of a text.

; @proc                   Set the type of device.
; @param windowhandle     The handle of the window.
; @param componentHandle  The handle of the component.
; @param type             The device type.
proc setType(number windowHandle, number componentHandle, number type)
    addr windowHandle
    mod  MODULE_COMPONENT_PU_DEVICE, PU_DEVICE_COMPONENT_SET_TYPE
end

; @proc                   Set the port of the device.
; @param windowhandle     The handle of the window.
; @param componentHandle  The handle of the component.
; @param port             The device port.
proc setPort(number windowHandle, number componentHandle, number port)
    addr windowHandle
    mod  MODULE_COMPONENT_PU_DEVICE, PU_DEVICE_COMPONENT_SET_PORT
end

; @proc                   Set the speed bar value.
; @param windowhandle     The handle of the window.
; @param componentHandle  The handle of the component.
; @param speed            The speed value in the range of -100..100.
proc setSpeed(number windowHandle, number componentHandle, number speed)
    addr windowHandle
    mod  MODULE_COMPONENT_PU_DEVICE, PU_DEVICE_COMPONENT_SET_SPEED
end

; @proc                   Set the value.
; @param windowhandle     The handle of the window.
; @param componentHandle  The handle of the component.
; @param value             The value.
proc setValue(number windowHandle, number componentHandle, number value)
    addr windowHandle
    mod  MODULE_COMPONENT_PU_DEVICE, PU_DEVICE_COMPONENT_SET_VALUE
end

; @proc                   Set the ready state.
; @param windowhandle     The handle of the window.
; @param componentHandle  The handle of the component.
; @param ready            The ready state.
proc setReady(number windowHandle, number componentHandle, number ready)
    addr windowHandle
    mod  MODULE_COMPONENT_PU_DEVICE, PU_DEVICE_COMPONENT_SET_READY
end

; @proc                   Set color mode, show the value as a color.
; @param windowhandle     The handle of the window.
; @param componentHandle  The handle of the component.
; @param colorMode        The color display mode `TRUE` or `FALSE`.
proc setColorMode(number windowHandle, number componentHandle, number colorMode)
    addr windowHandle
    mod  MODULE_COMPONENT_PU_DEVICE, PU_DEVICE_COMPONENT_SET_COLOR_MODE
end
