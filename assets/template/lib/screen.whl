; @module Screen
; Wheel, copyright (c) 2017 - present by Arno van der Vegt
; Distributed under an MIT license: https://arnovandervegt.github.io/wheel/license.txt

; @const The screen module.
#define MODULE_SCREEN         2

; @const Screen size informtion.
#define SCREEN_WIDTH        178
#define SCREEN_HEIGHT       128
#define SCREEN_CENTER_X      90
#define SCREEN_CENTER_Y      64

; @const Module calls to draw on the screen.
#define SCREEN_UPDATE         0
#define SCREEN_CLEAR          1
#define SCREEN_FILL           2
#define SCREEN_FILL_COLOR     3
#define SCREEN_TEXT_SIZE      4
#define SCREEN_TEXT_ALIGN     5
#define SCREEN_DRAW_PIXEL     6
#define SCREEN_DRAW_NUMBER    7
#define SCREEN_DRAW_TEXT      8
#define SCREEN_DRAW_LINE      9
#define SCREEN_DRAW_RECT     10
#define SCREEN_DRAW_CIRCLE   11
#define SCREEN_DRAW_IMAGE    12

; @const The two colors.
#define WHITE                 0
#define BLACK                 1

; @const There are three text sizes supported.
#define TEXT_SIZE_1           0
#define TEXT_SIZE_2           1
#define TEXT_SIZE_3           2

; @const Text alignment options.
#define TEXT_ALIGN_LEFT       0
#define TEXT_ALIGN_CENTER     1
#define TEXT_ALIGN_RIGHT      2

; @proc             Update the screen.
proc updateScreen()
    mod  MODULE_SCREEN, SCREEN_UPDATE
end

; @proc             Clear the entire screen.
proc clearScreen()
    mod MODULE_SCREEN, SCREEN_CLEAR
end

; @proc             Enable or disable filling, used for drawing rectangles or circles.
; @param fill       Enable or disable: `TRUE` or `FALSE`.
proc setFill(number fill)
    addr fill
    mod  MODULE_SCREEN, SCREEN_FILL
end

; @proc             Set the fill color.
; @param fillColor  The color: `WHITE` or `WHITE`
proc setFillColor(number fillColor)
    addr fillColor
    mod  MODULE_SCREEN, SCREEN_FILL_COLOR
end

; @proc             Set the text size.
; @param textSize   The size: `TEXT_SIZE_1`, `TEXT_SIZE_2` or `TEXT_SIZE_3`.
proc setTextSize(number textSize)
    addr textSize
    mod  MODULE_SCREEN, SCREEN_TEXT_SIZE
end

; @proc             Set the text alignment.
; @param textAlign  The size: `TEXT_ALIGN_LEFT`, `TEXT_ALIGN_CENTER` or `TEXT_ALIGN_RIGHT`.
proc setTextAlign(number textAlign)
    addr textAlign
    mod  MODULE_SCREEN, SCREEN_TEXT_ALIGN
end

; @proc             Draw a pixel with the current fill color.
; @param x          The x coordinate, a value equal or greater than 0 and less than 178, values out of range are ignored.
; @param y          The y coordinate, a value equal or greater than 0 and less than 128, values out of range are ignored.
proc drawPixel(number x, number y)
    addr x
    mod  MODULE_SCREEN, SCREEN_DRAW_PIXEL
end

; @proc             Draw number with the current fill color.
; @param x          The x coordinate.
; @param y          The y coordinate.
proc drawNumber(number x, number y, number n)
    addr x
    mod  MODULE_SCREEN, SCREEN_DRAW_NUMBER
end

; @proc             Draw text with the current fill color.
; @param x          The x coordinate.
; @param y          The y coordinate.
proc drawText(number x, number y, string s)
    addr x
    mod  MODULE_SCREEN, SCREEN_DRAW_TEXT
end

; @proc             Draw line with the current fill color.
; @param x1         The x coordinate of the start point.
; @param y1         The y coordinate of the start point.
; @param x2         The x coordinate of the end point.
; @param y2         The y coordinate of the end point.
proc drawLine(number x1, number y1, number x2, number y2)
    addr x1
    mod  MODULE_SCREEN, SCREEN_DRAW_LINE
end

; @proc             Draw rectange with the current fill color and fill setting.
; @param x          The x left position of the rectangle.
; @param y          The y top position of the rectangle.
; @param width      The width.
; @param height     The height.
proc drawRect(number x, number y, number width, number height)
    addr x
    mod  MODULE_SCREEN, SCREEN_DRAW_RECT
end

; @proc             Draw circle with the current fill color and fill setting.
; @param x          The x horizontal center of the circle.
; @param y          The y vertical center of the circle.
; @param radius     The radius.
proc drawCircle(number x, number y, number radius)
    addr x
    mod  MODULE_SCREEN, SCREEN_DRAW_CIRCLE
end

; @proc             Draw an image.
; @param x          The x left position.
; @param y          The y top position.
; @param filename   The filename, should have an .rgf extension.
proc drawImage(number x, number y, string filename)
    addr x
    mod  MODULE_SCREEN, SCREEN_DRAW_IMAGE
end
