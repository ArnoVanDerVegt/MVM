; @module Sound
; @device E
; Wheel, copyright (c) 2017 - present by Arno van der Vegt
; Distributed under an MIT license: https://arnovandervegt.github.io/wheel/license.txt

; @description
; This file contains procedures to play samples and tones on the `EV3` device.

; @const The sound module.
#define MODULE_SOUND        5        ; `image:images/ev3/ev364.png`

; @const Module calls for playing sounds
#define SOUND_PLAY_TONE     0
#define SOUND_PLAY_SAMPLE   1

; @const Tone frequencies
#define TONE_C4           262
#define TONE_C4_CIS       277
#define TONE_D4           294
#define TONE_D4_DIS       311
#define TONE_E4           330
#define TONE_F4           349
#define TONE_F4_FIS       370
#define TONE_G4           392
#define TONE_G4_GIS       415
#define TONE_A4           440
#define TONE_A4_AIS       466
#define TONE_B4           494
#define TONE_C5           523
#define TONE_C5_CIS       554
#define TONE_D5           587
#define TONE_D5_DIS       622
#define TONE_E5           659

; @proc             Play a tone.
; @param frequency  The frequency.
; @param duration   The duration in milliseconds.
; @param volume     The volume.
proc playTone(number frequency, number duration, number volume)
    addr frequency
    mod  MODULE_SOUND, SOUND_PLAY_TONE
end

; @proc             Play a sample.
; @param filename   The filename.
; @param volume     The volume.
proc playSample(string filename, number volume)
    addr filename
    mod  MODULE_SOUND, SOUND_PLAY_SAMPLE
end
