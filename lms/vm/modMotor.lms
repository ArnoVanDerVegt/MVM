//=================================================================================================//
//
// Wheel VM
//
// Copyright Arno van der Vegt 2019
// license: https://arnovandervegt.github.io/wheel/license.txt
//
//=================================================================================================//
subcall modMotor {                                                      // 06) MOTOR
    IN_8  pModCall_8
    IN_32 pRegSrc_32

    JR_EQ8(pModCall_8,  0, mod_motor_set_type)
    JR_EQ8(pModCall_8,  1, mod_motor_set_speed)
    JR_EQ8(pModCall_8,  2, mod_motor_set_brake)
    JR_EQ8(pModCall_8,  3, mod_motor_get_type)
    JR_EQ8(pModCall_8,  4, mod_motor_reset)
    JR_EQ8(pModCall_8,  5, mod_motor_reverse)
    JR_EQ8(pModCall_8,  6, mod_motor_move_to)
    JR_EQ8(pModCall_8,  7, mod_motor_move_to_bits)
    JR_EQ8(pModCall_8,  8, mod_motor_on)
    JR_EQ8(pModCall_8,  9, mod_motor_time_on)
    JR_EQ8(pModCall_8, 10, mod_motor_stop)
    JR_EQ8(pModCall_8, 11, mod_motor_read)
    JR_EQ8(pModCall_8, 12, mod_motor_ready)
    JR_EQ8(pModCall_8, 13, mod_motor_ready_bits)
    RETURN()

mod_motor_set_type:                                                     // 00) motorSetType
    RETURN()

mod_motor_set_speed:                                                    // 01) motorSetSpeed
    CALL(modMotorSetSpeed, pRegSrc_32)
    RETURN()

mod_motor_set_brake:                                                    // 02) motorSetBrake
    CALL(modMotorSetBrake, pRegSrc_32)
    RETURN()

mod_motor_get_type:                                                     // 03) motorGetType
    CALL(modMotorGetType, pRegSrc_32)
    RETURN()

mod_motor_reset:                                                        // 04) motorReset
    CALL(modMotorReset, pRegSrc_32)
    RETURN()

mod_motor_reverse:                                                      // 05) motorReset
    RETURN()

mod_motor_move_to:                                                      // 06) motorMoveTo
    CALL(modMotorMoveTo, pRegSrc_32)
    RETURN()

mod_motor_move_to_bits:                                                 // 07) motorMoveToBits
    RETURN()

mod_motor_on:                                                           // 08) motorOn
    CALL(modMotorOn, pRegSrc_32)
    RETURN()

mod_motor_time_on:                                                      // 09) motorTimeOn
    CALL(modMotorTimeOn, pRegSrc_32)
    RETURN()

mod_motor_stop:                                                         // 10) motorStop
    CALL(modMotorStop, pRegSrc_32)
    RETURN()

mod_motor_read:                                                         // 11) motorRead
    CALL(modMotorRead, pRegSrc_32)
    RETURN()

mod_motor_ready:                                                        // 12) motorReady
    CALL(modMotorReady, pRegSrc_32)
    RETURN()

mod_motor_ready_bits:                                                   // 13) motorReadyBits
    CALL(modMotorReadyBits, pRegSrc_32)
    RETURN()
}

subcall modMotorSetSpeed {
    IN_32 pRegSrc_32
    DATA8 lLayer_8
    DATA8 lPort_8
    DATA8 lSpeed_8

    CALL(readMem8, pRegSrc_32, 0, lLayer_8)
    CALL(readMem8, pRegSrc_32, 1, lPort_8)
    CALL(readMem8, pRegSrc_32, 2, lSpeed_8)

    JR_EQ8(lLayer_8, 0, mod_motor_set_speed_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_set_speed_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_set_speed_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_set_speed_layer4)
    RETURN()

mod_motor_set_speed_layer1:
    JR_EQ8(lPort_8, 0, mod_motor_set_speed_1a)
    JR_EQ8(lPort_8, 1, mod_motor_set_speed_1b)
    JR_EQ8(lPort_8, 2, mod_motor_set_speed_1c)
    JR_EQ8(lPort_8, 3, mod_motor_set_speed_1d)
    RETURN()
mod_motor_set_speed_1a:
    MOVE8_8(lSpeed_8, gModMotor1ASpeed_8)
    RETURN()
mod_motor_set_speed_1b:
    MOVE8_8(lSpeed_8, gModMotor1BSpeed_8)
    RETURN()
mod_motor_set_speed_1c:
    MOVE8_8(lSpeed_8, gModMotor1CSpeed_8)
    RETURN()
mod_motor_set_speed_1d:
    MOVE8_8(lSpeed_8, gModMotor1DSpeed_8)
    RETURN()

mod_motor_set_speed_layer2:
    JR_EQ8(lPort_8, 0, mod_motor_set_speed_2a)
    JR_EQ8(lPort_8, 1, mod_motor_set_speed_2b)
    JR_EQ8(lPort_8, 2, mod_motor_set_speed_2c)
    JR_EQ8(lPort_8, 3, mod_motor_set_speed_2d)
    RETURN()
mod_motor_set_speed_2a:
    MOVE8_8(lSpeed_8, gModMotor2ASpeed_8)
    RETURN()
mod_motor_set_speed_2b:
    MOVE8_8(lSpeed_8, gModMotor2BSpeed_8)
    RETURN()
mod_motor_set_speed_2c:
    MOVE8_8(lSpeed_8, gModMotor2CSpeed_8)
    RETURN()
mod_motor_set_speed_2d:
    MOVE8_8(lSpeed_8, gModMotor2DSpeed_8)
    RETURN()

mod_motor_set_speed_layer3:
    JR_EQ8(lPort_8, 0, mod_motor_set_speed_3a)
    JR_EQ8(lPort_8, 1, mod_motor_set_speed_3b)
    JR_EQ8(lPort_8, 2, mod_motor_set_speed_3c)
    JR_EQ8(lPort_8, 3, mod_motor_set_speed_3d)
    RETURN()
mod_motor_set_speed_3a:
    MOVE8_8(lSpeed_8, gModMotor3ASpeed_8)
    RETURN()
mod_motor_set_speed_3b:
    MOVE8_8(lSpeed_8, gModMotor3BSpeed_8)
    RETURN()
mod_motor_set_speed_3c:
    MOVE8_8(lSpeed_8, gModMotor3CSpeed_8)
    RETURN()
mod_motor_set_speed_3d:
    MOVE8_8(lSpeed_8, gModMotor3DSpeed_8)
    RETURN()

mod_motor_set_speed_layer4:
    JR_EQ8(lPort_8, 0, mod_motor_set_speed_4a)
    JR_EQ8(lPort_8, 1, mod_motor_set_speed_4b)
    JR_EQ8(lPort_8, 2, mod_motor_set_speed_4c)
    JR_EQ8(lPort_8, 3, mod_motor_set_speed_4d)
    RETURN()
mod_motor_set_speed_4a:
    MOVE8_8(lSpeed_8, gModMotor4ASpeed_8)
    RETURN()
mod_motor_set_speed_4b:
    MOVE8_8(lSpeed_8, gModMotor4BSpeed_8)
    RETURN()
mod_motor_set_speed_4c:
    MOVE8_8(lSpeed_8, gModMotor4CSpeed_8)
    RETURN()
mod_motor_set_speed_4d:
    MOVE8_8(lSpeed_8, gModMotor4DSpeed_8)
    RETURN()
}

subcall modMotorSetBrake {
    IN_32 pRegSrc_32
    DATA8 lLayer_8
    DATA8 lPort_8
    DATA8 lBrake_8

    CALL(readMem8, pRegSrc_32, 0, lLayer_8)
    CALL(readMem8, pRegSrc_32, 1, lPort_8)
    CALL(readMem8, pRegSrc_32, 2, lBrake_8)

    JR_EQ8(lLayer_8, 0, mod_motor_set_brake_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_set_brake_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_set_brake_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_set_brake_layer4)
    RETURN()

mod_motor_set_brake_layer1:
    JR_EQ8(lPort_8, 0, mod_motor_set_brake_1a)
    JR_EQ8(lPort_8, 1, mod_motor_set_brake_1b)
    JR_EQ8(lPort_8, 2, mod_motor_set_brake_1c)
    JR_EQ8(lPort_8, 3, mod_motor_set_brake_1d)
    RETURN()
mod_motor_set_brake_1a:
    MOVE8_8(lBrake_8, gModMotor1ABrake_8)
    RETURN()
mod_motor_set_brake_1b:
    MOVE8_8(lBrake_8, gModMotor1BBrake_8)
    RETURN()
mod_motor_set_brake_1c:
    MOVE8_8(lBrake_8, gModMotor1CBrake_8)
    RETURN()
mod_motor_set_brake_1d:
    MOVE8_8(lBrake_8, gModMotor1DBrake_8)
    RETURN()

mod_motor_set_brake_layer2:
    JR_EQ8(lPort_8, 0, mod_motor_set_brake_2a)
    JR_EQ8(lPort_8, 1, mod_motor_set_brake_2b)
    JR_EQ8(lPort_8, 2, mod_motor_set_brake_2c)
    JR_EQ8(lPort_8, 3, mod_motor_set_brake_2d)
    RETURN()
mod_motor_set_brake_2a:
    MOVE8_8(lBrake_8, gModMotor2ABrake_8)
    RETURN()
mod_motor_set_brake_2b:
    MOVE8_8(lBrake_8, gModMotor2BBrake_8)
    RETURN()
mod_motor_set_brake_2c:
    MOVE8_8(lBrake_8, gModMotor2CBrake_8)
    RETURN()
mod_motor_set_brake_2d:
    MOVE8_8(lBrake_8, gModMotor2DBrake_8)
    RETURN()

mod_motor_set_brake_layer3:
    JR_EQ8(lPort_8, 0, mod_motor_set_brake_3a)
    JR_EQ8(lPort_8, 1, mod_motor_set_brake_3b)
    JR_EQ8(lPort_8, 2, mod_motor_set_brake_3c)
    JR_EQ8(lPort_8, 3, mod_motor_set_brake_3d)
    RETURN()
mod_motor_set_brake_3a:
    MOVE8_8(lBrake_8, gModMotor3ABrake_8)
    RETURN()
mod_motor_set_brake_3b:
    MOVE8_8(lBrake_8, gModMotor3BBrake_8)
    RETURN()
mod_motor_set_brake_3c:
    MOVE8_8(lBrake_8, gModMotor3CBrake_8)
    RETURN()
mod_motor_set_brake_3d:
    MOVE8_8(lBrake_8, gModMotor3DBrake_8)
    RETURN()

mod_motor_set_brake_layer4:
    JR_EQ8(lPort_8, 0, mod_motor_set_brake_4a)
    JR_EQ8(lPort_8, 1, mod_motor_set_brake_4b)
    JR_EQ8(lPort_8, 2, mod_motor_set_brake_4c)
    JR_EQ8(lPort_8, 3, mod_motor_set_brake_4d)
    RETURN()
mod_motor_set_brake_4a:
    MOVE8_8(lBrake_8, gModMotor4ABrake_8)
    RETURN()
mod_motor_set_brake_4b:
    MOVE8_8(lBrake_8, gModMotor4BBrake_8)
    RETURN()
mod_motor_set_brake_4c:
    MOVE8_8(lBrake_8, gModMotor4CBrake_8)
    RETURN()
mod_motor_set_brake_4d:
    MOVE8_8(lBrake_8, gModMotor4DBrake_8)
    RETURN()
}

subcall modMotorGetType {
    IN_32 pRegSrc_32
    DATA8 lLayer_8
    DATA8 lPort_8
    DATA8 lType_8
    DATA8 lMode_8

    CALL(readMem8, pRegSrc_32, 0, lLayer_8)
    CALL(readMem8, pRegSrc_32, 1, lPort_8)

    ADD8(lPort_8, 16, lPort_8)
    INPUT_DEVICE(GET_TYPEMODE, lLayer_8, lPort_8, lType_8, lMode_8)

    CALL(setRet8AndKeep, lType_8)
}

subcall modMotorReset {
    IN_32 pRegSrc_32
    DATA8 lLayer_8
    DATA8 lPort_8

    CALL(readMem8, pRegSrc_32, 0, lLayer_8)
    CALL(readMem8, pRegSrc_32, 1, lPort_8)

    JR_EQ8(lLayer_8, 0, mod_motor_reset_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_reset_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_reset_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_reset_layer4)
    RETURN()

mod_motor_reset_layer1:
    JR_EQ8(lPort_8, 0, mod_motor_reset_1a)
    JR_EQ8(lPort_8, 1, mod_motor_reset_1b)
    JR_EQ8(lPort_8, 2, mod_motor_reset_1c)
    JR_EQ8(lPort_8, 3, mod_motor_reset_1d)
    RETURN()
mod_motor_reset_1a:
    CALL(modMotorResetMotor, 101)
    MOVE8_8(1, gModMotor1AUpdated_8)
    MOVE32_32(0, gModMotor1ACurrrent_32)
    MOVE32_32(0, gModMotor1ATarget_32)
    RETURN()
mod_motor_reset_1b:
    CALL(modMotorResetMotor, 102)
    MOVE8_8(1, gModMotor1BUpdated_8)
    MOVE32_32(0, gModMotor1BCurrrent_32)
    MOVE32_32(0, gModMotor1BTarget_32)
    RETURN()
mod_motor_reset_1c:
    CALL(modMotorResetMotor, 103)
    MOVE8_8(1, gModMotor1CUpdated_8)
    MOVE32_32(0, gModMotor1CCurrrent_32)
    MOVE32_32(0, gModMotor1CTarget_32)
    RETURN()
mod_motor_reset_1d:
    CALL(modMotorResetMotor, 104)
    MOVE8_8(1, gModMotor1DUpdated_8)
    MOVE32_32(0, gModMotor1DCurrrent_32)
    MOVE32_32(0, gModMotor1DTarget_32)
    RETURN()

mod_motor_reset_layer2:
    JR_EQ8(lPort_8, 0, mod_motor_reset_2a)
    JR_EQ8(lPort_8, 1, mod_motor_reset_2b)
    JR_EQ8(lPort_8, 2, mod_motor_reset_2c)
    JR_EQ8(lPort_8, 3, mod_motor_reset_2d)
    RETURN()
mod_motor_reset_2a:
    CALL(modMotorResetMotor, 201)
    MOVE8_8(1, gModMotor2AUpdated_8)
    MOVE32_32(0, gModMotor2ACurrrent_32)
    MOVE32_32(0, gModMotor2ATarget_32)
    RETURN()
mod_motor_reset_2b:
    CALL(modMotorResetMotor, 202)
    MOVE8_8(1, gModMotor2BUpdated_8)
    MOVE32_32(0, gModMotor2BCurrrent_32)
    MOVE32_32(0, gModMotor2BTarget_32)
    RETURN()
mod_motor_reset_2c:
    CALL(modMotorResetMotor, 203)
    MOVE8_8(1, gModMotor2CUpdated_8)
    MOVE32_32(0, gModMotor2CCurrrent_32)
    MOVE32_32(0, gModMotor2CTarget_32)
    RETURN()
mod_motor_reset_2d:
    CALL(modMotorResetMotor, 204)
    MOVE8_8(1, gModMotor2DUpdated_8)
    MOVE32_32(0, gModMotor2DCurrrent_32)
    MOVE32_32(0, gModMotor2DTarget_32)
    RETURN()

mod_motor_reset_layer3:
    JR_EQ8(lPort_8, 0, mod_motor_reset_3a)
    JR_EQ8(lPort_8, 1, mod_motor_reset_3b)
    JR_EQ8(lPort_8, 2, mod_motor_reset_3c)
    JR_EQ8(lPort_8, 3, mod_motor_reset_3d)
    RETURN()
mod_motor_reset_3a:
    CALL(modMotorResetMotor, 301)
    MOVE8_8(1, gModMotor3AUpdated_8)
    MOVE32_32(0, gModMotor3ACurrrent_32)
    MOVE32_32(0, gModMotor3ATarget_32)
    RETURN()
mod_motor_reset_3b:
    CALL(modMotorResetMotor, 302)
    MOVE8_8(1, gModMotor3BUpdated_8)
    MOVE32_32(0, gModMotor3BCurrrent_32)
    MOVE32_32(0, gModMotor3BTarget_32)
    RETURN()
mod_motor_reset_3c:
    CALL(modMotorResetMotor, 303)
    MOVE8_8(1, gModMotor3CUpdated_8)
    MOVE32_32(0, gModMotor3CCurrrent_32)
    MOVE32_32(0, gModMotor3CTarget_32)
    RETURN()
mod_motor_reset_3d:
    CALL(modMotorResetMotor, 304)
    MOVE8_8(1, gModMotor3DUpdated_8)
    MOVE32_32(0, gModMotor3DCurrrent_32)
    MOVE32_32(0, gModMotor3DTarget_32)
    RETURN()

mod_motor_reset_layer4:
    JR_EQ8(lPort_8, 0, mod_motor_reset_4a)
    JR_EQ8(lPort_8, 1, mod_motor_reset_4b)
    JR_EQ8(lPort_8, 2, mod_motor_reset_4c)
    JR_EQ8(lPort_8, 3, mod_motor_reset_4d)
    RETURN()
mod_motor_reset_4a:
    CALL(modMotorResetMotor, 401)
    MOVE8_8(1, gModMotor4AUpdated_8)
    MOVE32_32(0, gModMotor4ACurrrent_32)
    MOVE32_32(0, gModMotor4ATarget_32)
    RETURN()
mod_motor_reset_4b:
    CALL(modMotorResetMotor, 402)
    MOVE8_8(1, gModMotor4BUpdated_8)
    MOVE32_32(0, gModMotor4BCurrrent_32)
    MOVE32_32(0, gModMotor4BTarget_32)
    RETURN()
mod_motor_reset_4c:
    CALL(modMotorResetMotor, 403)
    MOVE8_8(1, gModMotor4CUpdated_8)
    MOVE32_32(0, gModMotor4CCurrrent_32)
    MOVE32_32(0, gModMotor4CTarget_32)
    RETURN()
mod_motor_reset_4d:
    CALL(modMotorResetMotor, 404)
    MOVE8_8(1, gModMotor4DUpdated_8)
    MOVE32_32(0, gModMotor4DCurrrent_32)
    MOVE32_32(0, gModMotor4DTarget_32)
    RETURN()
}

subcall modMotorMoveTo {
    IN_32  pRegSrc_32
    DATA8  lLayer_8
    DATA8  lPort_8
    DATA32 lTarget_32

    CALL(readMem8,  pRegSrc_32, 0, lLayer_8)
    CALL(readMem8,  pRegSrc_32, 1, lPort_8)
    CALL(readMem32, pRegSrc_32, 2, lTarget_32)

    JR_EQ8(lLayer_8, 0, mod_motor_move_to_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_move_to_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_move_to_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_move_to_layer4)
    RETURN()

mod_motor_move_to_layer1:
    JR_EQ8(lPort_8, 0, mod_motor_move_to_1a)
    JR_EQ8(lPort_8, 1, mod_motor_move_to_1b)
    JR_EQ8(lPort_8, 2, mod_motor_move_to_1c)
    JR_EQ8(lPort_8, 3, mod_motor_move_to_1d)
    RETURN()
mod_motor_move_to_1a:
    MOVE8_8(0, gModMotor1AReady_8)
    MOVE8_8(1, gModMotor1AUpdated_8)
    MOVE32_32(lTarget_32, gModMotor1ATarget_32)
    MOVE8_8(1, gModMotor1AMode_8)
    CALL(startThread1A)
    RETURN()
mod_motor_move_to_1b:
    MOVE8_8(0, gModMotor1BReady_8)
    MOVE8_8(1, gModMotor1BUpdated_8)
    MOVE32_32(lTarget_32, gModMotor1BTarget_32)
    MOVE8_8(1, gModMotor1BMode_8)
    CALL(startThread1B)
    RETURN()
mod_motor_move_to_1c:
    MOVE8_8(0, gModMotor1CReady_8)
    MOVE8_8(1, gModMotor1CUpdated_8)
    MOVE32_32(lTarget_32, gModMotor1CTarget_32)
    MOVE8_8(1, gModMotor1CMode_8)
    CALL(startThread1C)
    RETURN()
mod_motor_move_to_1d:
    MOVE8_8(0, gModMotor1DReady_8)
    MOVE8_8(1, gModMotor1DUpdated_8)
    MOVE32_32(lTarget_32, gModMotor1DTarget_32)
    MOVE8_8(1, gModMotor1DMode_8)
    CALL(startThread1D)
    RETURN()

mod_motor_move_to_layer2:
    JR_EQ8(lPort_8, 0, mod_motor_move_to_2a)
    JR_EQ8(lPort_8, 1, mod_motor_move_to_2b)
    JR_EQ8(lPort_8, 2, mod_motor_move_to_2c)
    JR_EQ8(lPort_8, 3, mod_motor_move_to_2d)
    RETURN()
mod_motor_move_to_2a:
    MOVE8_8(0, gModMotor2AReady_8)
    MOVE8_8(1, gModMotor2AUpdated_8)
    MOVE32_32(lTarget_32, gModMotor2ATarget_32)
    MOVE8_8(1, gModMotor2AMode_8)
    CALL(startThread2A)
    RETURN()
mod_motor_move_to_2b:
    MOVE8_8(0, gModMotor2BReady_8)
    MOVE8_8(1, gModMotor2BUpdated_8)
    MOVE32_32(lTarget_32, gModMotor2BTarget_32)
    MOVE8_8(1, gModMotor2BMode_8)
    CALL(startThread2B)
    RETURN()
mod_motor_move_to_2c:
    MOVE8_8(0, gModMotor2CReady_8)
    MOVE8_8(1, gModMotor2CUpdated_8)
    MOVE32_32(lTarget_32, gModMotor2CTarget_32)
    MOVE8_8(1, gModMotor2CMode_8)
    CALL(startThread2C)
    RETURN()
mod_motor_move_to_2d:
    MOVE8_8(0, gModMotor2DReady_8)
    MOVE8_8(1, gModMotor2DUpdated_8)
    MOVE32_32(lTarget_32, gModMotor2DTarget_32)
    MOVE8_8(1, gModMotor2DMode_8)
    CALL(startThread2D)
    RETURN()

mod_motor_move_to_layer3:
    JR_EQ8(lPort_8, 0, mod_motor_move_to_3a)
    JR_EQ8(lPort_8, 1, mod_motor_move_to_3b)
    JR_EQ8(lPort_8, 2, mod_motor_move_to_3c)
    JR_EQ8(lPort_8, 3, mod_motor_move_to_3d)
    RETURN()
mod_motor_move_to_3a:
    MOVE8_8(0, gModMotor3AReady_8)
    MOVE8_8(1, gModMotor3AUpdated_8)
    MOVE32_32(lTarget_32, gModMotor3ATarget_32)
    MOVE8_8(1, gModMotor3AMode_8)
    CALL(startThread3A)
    RETURN()
mod_motor_move_to_3b:
    MOVE8_8(0, gModMotor3BReady_8)
    MOVE8_8(1, gModMotor3BUpdated_8)
    MOVE32_32(lTarget_32, gModMotor3BTarget_32)
    MOVE8_8(1, gModMotor3BMode_8)
    CALL(startThread3B)
    RETURN()
mod_motor_move_to_3c:
    MOVE8_8(0, gModMotor3CReady_8)
    MOVE8_8(1, gModMotor3CUpdated_8)
    MOVE32_32(lTarget_32, gModMotor3CTarget_32)
    MOVE8_8(1, gModMotor3CMode_8)
    CALL(startThread3C)
    RETURN()
mod_motor_move_to_3d:
    MOVE8_8(0, gModMotor3DReady_8)
    MOVE8_8(1, gModMotor3DUpdated_8)
    MOVE32_32(lTarget_32, gModMotor3DTarget_32)
    MOVE8_8(1, gModMotor3DMode_8)
    CALL(startThread3D)
    RETURN()

mod_motor_move_to_layer4:
    JR_EQ8(lPort_8, 0, mod_motor_move_to_4a)
    JR_EQ8(lPort_8, 1, mod_motor_move_to_4b)
    JR_EQ8(lPort_8, 2, mod_motor_move_to_4c)
    JR_EQ8(lPort_8, 3, mod_motor_move_to_4d)
    RETURN()
mod_motor_move_to_4a:
    MOVE8_8(0, gModMotor4AReady_8)
    MOVE8_8(1, gModMotor4AUpdated_8)
    MOVE32_32(lTarget_32, gModMotor4ATarget_32)
    MOVE8_8(1, gModMotor4AMode_8)
    CALL(startThread4A)
    RETURN()
mod_motor_move_to_4b:
    MOVE8_8(0, gModMotor4BReady_8)
    MOVE8_8(1, gModMotor4BUpdated_8)
    MOVE32_32(lTarget_32, gModMotor4BTarget_32)
    MOVE8_8(1, gModMotor4BMode_8)
    CALL(startThread4B)
    RETURN()
mod_motor_move_to_4c:
    MOVE8_8(0, gModMotor4CReady_8)
    MOVE8_8(1, gModMotor4CUpdated_8)
    MOVE32_32(lTarget_32, gModMotor4CTarget_32)
    MOVE8_8(1, gModMotor4CMode_8)
    CALL(startThread4C)
    RETURN()
mod_motor_move_to_4d:
    MOVE8_8(0, gModMotor4DReady_8)
    MOVE8_8(1, gModMotor4DUpdated_8)
    MOVE32_32(lTarget_32, gModMotor4DTarget_32)
    MOVE8_8(1, gModMotor4DMode_8)
    CALL(startThread4D)
    RETURN()
}

subcall modMotorOn {
    IN_32  pRegSrc_32
    DATA8  lLayer_8
    DATA8  lPort_8

    CALL(readMem8, pRegSrc_32, 0, lLayer_8)
    CALL(readMem8, pRegSrc_32, 1, lPort_8)

    JR_EQ8(lLayer_8, 0, mod_motor_on_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_on_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_on_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_on_layer4)
    RETURN()

mod_motor_on_layer1:
    JR_EQ8(lPort_8, 0, mod_motor_on_1a)
    JR_EQ8(lPort_8, 1, mod_motor_on_1b)
    JR_EQ8(lPort_8, 2, mod_motor_on_1c)
    JR_EQ8(lPort_8, 3, mod_motor_on_1d)
    RETURN()
mod_motor_on_1a:
    MOVE8_8(0, gModMotor1AMode_8)
    CALL(modMotorOnMotor, 101, gModMotor1ASpeed_8)
    RETURN()
mod_motor_on_1b:
    MOVE8_8(0, gModMotor1AMode_8)
    CALL(modMotorOnMotor, 102, gModMotor1BSpeed_8)
    RETURN()
mod_motor_on_1c:
    MOVE8_8(0, gModMotor1AMode_8)
    CALL(modMotorOnMotor, 103, gModMotor1CSpeed_8)
    RETURN()
mod_motor_on_1d:
    MOVE8_8(0, gModMotor1AMode_8)
    CALL(modMotorOnMotor, 104, gModMotor1DSpeed_8)
    RETURN()

mod_motor_on_layer2:
    JR_EQ8(lPort_8, 0, mod_motor_on_2a)
    JR_EQ8(lPort_8, 1, mod_motor_on_2b)
    JR_EQ8(lPort_8, 2, mod_motor_on_2c)
    JR_EQ8(lPort_8, 3, mod_motor_on_2d)
    RETURN()
mod_motor_on_2a:
    MOVE8_8(0, gModMotor2AMode_8)
    CALL(modMotorOnMotor, 201, gModMotor2ASpeed_8)
    RETURN()
mod_motor_on_2b:
    MOVE8_8(0, gModMotor2AMode_8)
    CALL(modMotorOnMotor, 202, gModMotor2BSpeed_8)
    RETURN()
mod_motor_on_2c:
    MOVE8_8(0, gModMotor2AMode_8)
    CALL(modMotorOnMotor, 203, gModMotor2CSpeed_8)
    RETURN()
mod_motor_on_2d:
    MOVE8_8(0, gModMotor2AMode_8)
    CALL(modMotorOnMotor, 204, gModMotor2DSpeed_8)
    RETURN()

mod_motor_on_layer3:
    JR_EQ8(lPort_8, 0, mod_motor_on_3a)
    JR_EQ8(lPort_8, 1, mod_motor_on_3b)
    JR_EQ8(lPort_8, 2, mod_motor_on_3c)
    JR_EQ8(lPort_8, 3, mod_motor_on_3d)
    RETURN()
mod_motor_on_3a:
    MOVE8_8(0, gModMotor3AMode_8)
    CALL(modMotorOnMotor, 301, gModMotor3ASpeed_8)
    RETURN()
mod_motor_on_3b:
    MOVE8_8(0, gModMotor3AMode_8)
    CALL(modMotorOnMotor, 302, gModMotor3BSpeed_8)
    RETURN()
mod_motor_on_3c:
    MOVE8_8(0, gModMotor3AMode_8)
    CALL(modMotorOnMotor, 303, gModMotor3CSpeed_8)
    RETURN()
mod_motor_on_3d:
    MOVE8_8(0, gModMotor3AMode_8)
    CALL(modMotorOnMotor, 304, gModMotor3DSpeed_8)
    RETURN()

mod_motor_on_layer4:
    JR_EQ8(lPort_8, 0, mod_motor_on_4a)
    JR_EQ8(lPort_8, 1, mod_motor_on_4b)
    JR_EQ8(lPort_8, 2, mod_motor_on_4c)
    JR_EQ8(lPort_8, 3, mod_motor_on_4d)
    RETURN()
mod_motor_on_4a:
    MOVE8_8(0, gModMotor4AMode_8)
    CALL(modMotorOnMotor, 401, gModMotor4ASpeed_8)
    RETURN()
mod_motor_on_4b:
    MOVE8_8(0, gModMotor4AMode_8)
    CALL(modMotorOnMotor, 402, gModMotor4BSpeed_8)
    RETURN()
mod_motor_on_4c:
    MOVE8_8(0, gModMotor4AMode_8)
    CALL(modMotorOnMotor, 403, gModMotor4CSpeed_8)
    RETURN()
mod_motor_on_4d:
    MOVE8_8(0, gModMotor4AMode_8)
    CALL(modMotorOnMotor, 404, gModMotor4DSpeed_8)
    RETURN()
}

subcall modMotorTimeOn {
    IN_32  pRegSrc_32
    DATA8  lLayer_8
    DATA8  lPort_8
    DATA32 lTime_32

    CALL(readMem8,  pRegSrc_32, 0, lLayer_8)
    CALL(readMem8,  pRegSrc_32, 1, lPort_8)
    CALL(readMem32, pRegSrc_32, 2, lTime_32)

    JR_EQ8(lLayer_8, 0, mod_motor_time_on_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_time_on_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_time_on_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_time_on_layer4)
    RETURN()

mod_motor_time_on_layer1:
    JR_EQ8(lPort_8, 0, mod_motor_time_on_1a)
    JR_EQ8(lPort_8, 1, mod_motor_time_on_1b)
    JR_EQ8(lPort_8, 2, mod_motor_time_on_1c)
    JR_EQ8(lPort_8, 3, mod_motor_time_on_1d)
    RETURN()
mod_motor_time_on_1a:
    MOVE8_8(1, gModMotor1AUpdated_8)
    MOVE32_32(lTime_32, gModMotor1ATime_32)
    MOVE8_8(2, gModMotor1AMode_8)
    CALL(startThread1A)
    RETURN()
mod_motor_time_on_1b:
    MOVE8_8(1, gModMotor1BUpdated_8)
    MOVE32_32(lTime_32, gModMotor1BTime_32)
    MOVE8_8(2, gModMotor1BMode_8)
    CALL(startThread1B)
    RETURN()
mod_motor_time_on_1c:
    MOVE8_8(1, gModMotor1CUpdated_8)
    MOVE32_32(lTime_32, gModMotor1CTime_32)
    MOVE8_8(2, gModMotor1CMode_8)
    CALL(startThread1C)
    RETURN()
mod_motor_time_on_1d:
    MOVE8_8(1, gModMotor1DUpdated_8)
    MOVE32_32(lTime_32, gModMotor1DTime_32)
    MOVE8_8(2, gModMotor1DMode_8)
    CALL(startThread1D)
    RETURN()

mod_motor_time_on_layer2:
    JR_EQ8(lPort_8, 0, mod_motor_time_on_2a)
    JR_EQ8(lPort_8, 1, mod_motor_time_on_2b)
    JR_EQ8(lPort_8, 2, mod_motor_time_on_2c)
    JR_EQ8(lPort_8, 3, mod_motor_time_on_2d)
    RETURN()
mod_motor_time_on_2a:
    MOVE8_8(1, gModMotor2AUpdated_8)
    MOVE32_32(lTime_32, gModMotor2ATime_32)
    MOVE8_8(2, gModMotor2AMode_8)
    CALL(startThread2A)
    RETURN()
mod_motor_time_on_2b:
    MOVE8_8(1, gModMotor2BUpdated_8)
    MOVE32_32(lTime_32, gModMotor2BTime_32)
    MOVE8_8(2, gModMotor2BMode_8)
    CALL(startThread2B)
    RETURN()
mod_motor_time_on_2c:
    MOVE8_8(1, gModMotor2CUpdated_8)
    MOVE32_32(lTime_32, gModMotor2CTime_32)
    MOVE8_8(2, gModMotor2CMode_8)
    CALL(startThread2C)
    RETURN()
mod_motor_time_on_2d:
    MOVE8_8(1, gModMotor2DUpdated_8)
    MOVE32_32(lTime_32, gModMotor2DTime_32)
    MOVE8_8(2, gModMotor2DMode_8)
    CALL(startThread2D)
    RETURN()

mod_motor_time_on_layer3:
    JR_EQ8(lPort_8, 0, mod_motor_time_on_3a)
    JR_EQ8(lPort_8, 1, mod_motor_time_on_3b)
    JR_EQ8(lPort_8, 2, mod_motor_time_on_3c)
    JR_EQ8(lPort_8, 3, mod_motor_time_on_3d)
    RETURN()
mod_motor_time_on_3a:
    MOVE8_8(1, gModMotor3AUpdated_8)
    MOVE32_32(lTime_32, gModMotor3ATime_32)
    MOVE8_8(2, gModMotor3AMode_8)
    CALL(startThread3A)
    RETURN()
mod_motor_time_on_3b:
    MOVE8_8(1, gModMotor3BUpdated_8)
    MOVE32_32(lTime_32, gModMotor3BTime_32)
    MOVE8_8(2, gModMotor3BMode_8)
    CALL(startThread3B)
    RETURN()
mod_motor_time_on_3c:
    MOVE8_8(1, gModMotor3CUpdated_8)
    MOVE32_32(lTime_32, gModMotor3CTime_32)
    MOVE8_8(2, gModMotor3CMode_8)
    CALL(startThread3C)
    RETURN()
mod_motor_time_on_3d:
    MOVE8_8(1, gModMotor3DUpdated_8)
    MOVE32_32(lTime_32, gModMotor3DTime_32)
    MOVE8_8(2, gModMotor3DMode_8)
    CALL(startThread3D)
    RETURN()

mod_motor_time_on_layer4:
    JR_EQ8(lPort_8, 0, mod_motor_time_on_4a)
    JR_EQ8(lPort_8, 1, mod_motor_time_on_4b)
    JR_EQ8(lPort_8, 2, mod_motor_time_on_4c)
    JR_EQ8(lPort_8, 3, mod_motor_time_on_4d)
    RETURN()
mod_motor_time_on_4a:
    MOVE8_8(1, gModMotor4AUpdated_8)
    MOVE32_32(lTime_32, gModMotor4ATime_32)
    MOVE8_8(2, gModMotor4AMode_8)
    CALL(startThread4A)
    RETURN()
mod_motor_time_on_4b:
    MOVE8_8(1, gModMotor4BUpdated_8)
    MOVE32_32(lTime_32, gModMotor4BTime_32)
    MOVE8_8(2, gModMotor4BMode_8)
    CALL(startThread4B)
    RETURN()
mod_motor_time_on_4c:
    MOVE8_8(1, gModMotor4CUpdated_8)
    MOVE32_32(lTime_32, gModMotor4CTime_32)
    MOVE8_8(2, gModMotor4CMode_8)
    CALL(startThread4C)
    RETURN()
mod_motor_time_on_4d:
    MOVE8_8(1, gModMotor4DUpdated_8)
    MOVE32_32(lTime_32, gModMotor4DTime_32)
    MOVE8_8(2, gModMotor4DMode_8)
    CALL(startThread4D)
    RETURN()
}

subcall modMotorStop {
    IN_32 pRegSrc_32
    DATA8 lLayer_8
    DATA8 lPort_8

    CALL(readMem8, pRegSrc_32, 0, lLayer_8)
    CALL(readMem8, pRegSrc_32, 1, lPort_8)

    JR_EQ8(lLayer_8, 0, mod_motor_stop_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_stop_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_stop_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_stop_layer4)
    RETURN()

mod_motor_stop_layer1:
    JR_EQ8(lPort_8, 0, mod_motor_stop_1a)
    JR_EQ8(lPort_8, 1, mod_motor_stop_1b)
    JR_EQ8(lPort_8, 2, mod_motor_stop_1c)
    JR_EQ8(lPort_8, 3, mod_motor_stop_1d)
    RETURN()
mod_motor_stop_1a:
    CALL(modMotorStopMotor, 101, gModMotor1ABrake_8)
    MOVE8_8(0, gModMotor1AMode_8)
    RETURN()
mod_motor_stop_1b:
    CALL(modMotorStopMotor, 102, gModMotor1BBrake_8)
    MOVE8_8(0, gModMotor1BMode_8)
    RETURN()
mod_motor_stop_1c:
    CALL(modMotorStopMotor, 103, gModMotor1CBrake_8)
    MOVE8_8(0, gModMotor1CMode_8)
    RETURN()
mod_motor_stop_1d:
    CALL(modMotorStopMotor, 104, gModMotor1DBrake_8)
    MOVE8_8(0, gModMotor1DMode_8)
    RETURN()

mod_motor_stop_layer2:
    JR_EQ8(lPort_8, 0, mod_motor_stop_2a)
    JR_EQ8(lPort_8, 1, mod_motor_stop_2b)
    JR_EQ8(lPort_8, 2, mod_motor_stop_2c)
    JR_EQ8(lPort_8, 3, mod_motor_stop_2d)
    RETURN()
mod_motor_stop_2a:
    CALL(modMotorStopMotor, 201, gModMotor2ABrake_8)
    MOVE8_8(0, gModMotor2AMode_8)
    RETURN()
mod_motor_stop_2b:
    CALL(modMotorStopMotor, 202, gModMotor2BBrake_8)
    MOVE8_8(0, gModMotor2BMode_8)
    RETURN()
mod_motor_stop_2c:
    CALL(modMotorStopMotor, 203, gModMotor2CBrake_8)
    MOVE8_8(0, gModMotor2CMode_8)
    RETURN()
mod_motor_stop_2d:
    CALL(modMotorStopMotor, 204, gModMotor2DBrake_8)
    MOVE8_8(0, gModMotor2DMode_8)
    RETURN()

mod_motor_stop_layer3:
    JR_EQ8(lPort_8, 0, mod_motor_stop_3a)
    JR_EQ8(lPort_8, 1, mod_motor_stop_3b)
    JR_EQ8(lPort_8, 2, mod_motor_stop_3c)
    JR_EQ8(lPort_8, 3, mod_motor_stop_3d)
    RETURN()
mod_motor_stop_3a:
    CALL(modMotorStopMotor, 301, gModMotor3ABrake_8)
    MOVE8_8(0, gModMotor1AMode_8)
    RETURN()
mod_motor_stop_3b:
    CALL(modMotorStopMotor, 302, gModMotor3BBrake_8)
    MOVE8_8(0, gModMotor1BMode_8)
    RETURN()
mod_motor_stop_3c:
    CALL(modMotorStopMotor, 303, gModMotor3CBrake_8)
    MOVE8_8(0, gModMotor1CMode_8)
    RETURN()
mod_motor_stop_3d:
    CALL(modMotorStopMotor, 304, gModMotor3DBrake_8)
    MOVE8_8(0, gModMotor1DMode_8)
    RETURN()

mod_motor_stop_layer4:
    JR_EQ8(lPort_8, 0, mod_motor_stop_4a)
    JR_EQ8(lPort_8, 1, mod_motor_stop_4b)
    JR_EQ8(lPort_8, 2, mod_motor_stop_4c)
    JR_EQ8(lPort_8, 3, mod_motor_stop_4d)
    RETURN()
mod_motor_stop_4a:
    CALL(modMotorStopMotor, 401, gModMotor4ABrake_8)
    MOVE8_8(0, gModMotor4AMode_8)
    RETURN()
mod_motor_stop_4b:
    CALL(modMotorStopMotor, 402, gModMotor4BBrake_8)
    MOVE8_8(0, gModMotor4BMode_8)
    RETURN()
mod_motor_stop_4c:
    CALL(modMotorStopMotor, 403, gModMotor4CBrake_8)
    MOVE8_8(0, gModMotor4CMode_8)
    RETURN()
mod_motor_stop_4d:
    CALL(modMotorStopMotor, 404, gModMotor4DBrake_8)
    MOVE8_8(0, gModMotor4DMode_8)
    RETURN()
}

subcall modMotorRead {
    IN_32 pRegSrc_32
    DATA8 lLayer_8
    DATA8 lPort_8

    CALL(readMem8, pRegSrc_32, 0, lLayer_8)
    CALL(readMem8, pRegSrc_32, 1, lPort_8)

    JR_EQ8(lLayer_8, 0, mod_motor_read_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_read_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_read_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_read_layer4)
    RETURN()

mod_motor_read_layer1:
    JR_EQ8(lPort_8, 0, mod_motor_read_1a)
    JR_EQ8(lPort_8, 1, mod_motor_read_1b)
    JR_EQ8(lPort_8, 2, mod_motor_read_1c)
    JR_EQ8(lPort_8, 3, mod_motor_read_1d)
    RETURN()
mod_motor_read_1a:
    CALL(modMotorReadValue, 101, gModMotor1ACurrrent_32)
    CALL(setRet32AndKeep, gModMotor1ACurrrent_32)
    RETURN()
mod_motor_read_1b:
    CALL(modMotorReadValue, 102, gModMotor1BCurrrent_32)
    CALL(setRet32AndKeep, gModMotor1BCurrrent_32)
    RETURN()
mod_motor_read_1c:
    CALL(modMotorReadValue, 103, gModMotor1CCurrrent_32)
    CALL(setRet32AndKeep, gModMotor1CCurrrent_32)
    RETURN()
mod_motor_read_1d:
    CALL(modMotorReadValue, 104, gModMotor1DCurrrent_32)
    CALL(setRet32AndKeep, gModMotor1DCurrrent_32)
    RETURN()

mod_motor_read_layer2:
    JR_EQ8(lPort_8, 0, mod_motor_read_2a)
    JR_EQ8(lPort_8, 1, mod_motor_read_2b)
    JR_EQ8(lPort_8, 2, mod_motor_read_2c)
    JR_EQ8(lPort_8, 3, mod_motor_read_2d)
    RETURN()
mod_motor_read_2a:
    CALL(modMotorReadValue, 201, gModMotor2ACurrrent_32)
    CALL(setRet32AndKeep, gModMotor2ACurrrent_32)
    RETURN()
mod_motor_read_2b:
    CALL(modMotorReadValue, 202, gModMotor2BCurrrent_32)
    CALL(setRet32AndKeep, gModMotor2BCurrrent_32)
    RETURN()
mod_motor_read_2c:
    CALL(modMotorReadValue, 203, gModMotor2CCurrrent_32)
    CALL(setRet32AndKeep, gModMotor2CCurrrent_32)
    RETURN()
mod_motor_read_2d:
    CALL(modMotorReadValue, 204, gModMotor2DCurrrent_32)
    CALL(setRet32AndKeep, gModMotor2DCurrrent_32)
    RETURN()

mod_motor_read_layer3:
    JR_EQ8(lPort_8, 0, mod_motor_read_3a)
    JR_EQ8(lPort_8, 1, mod_motor_read_3b)
    JR_EQ8(lPort_8, 2, mod_motor_read_3c)
    JR_EQ8(lPort_8, 3, mod_motor_read_3d)
    RETURN()
mod_motor_read_3a:
    CALL(modMotorReadValue, 301, gModMotor3ACurrrent_32)
    CALL(setRet32AndKeep, gModMotor3ACurrrent_32)
    RETURN()
mod_motor_read_3b:
    CALL(modMotorReadValue, 302, gModMotor3BCurrrent_32)
    CALL(setRet32AndKeep, gModMotor3BCurrrent_32)
    RETURN()
mod_motor_read_3c:
    CALL(modMotorReadValue, 303, gModMotor3CCurrrent_32)
    CALL(setRet32AndKeep, gModMotor3CCurrrent_32)
    RETURN()
mod_motor_read_3d:
    CALL(modMotorReadValue, 304, gModMotor3DCurrrent_32)
    CALL(setRet32AndKeep, gModMotor3DCurrrent_32)
    RETURN()

mod_motor_read_layer4:
    JR_EQ8(lPort_8, 0, mod_motor_read_4a)
    JR_EQ8(lPort_8, 1, mod_motor_read_4b)
    JR_EQ8(lPort_8, 2, mod_motor_read_4c)
    JR_EQ8(lPort_8, 3, mod_motor_read_4d)
    RETURN()
mod_motor_read_4a:
    CALL(modMotorReadValue, 401, gModMotor4ACurrrent_32)
    CALL(setRet32AndKeep, gModMotor4ACurrrent_32)
    RETURN()
mod_motor_read_4b:
    CALL(modMotorReadValue, 402, gModMotor4BCurrrent_32)
    CALL(setRet32AndKeep, gModMotor4BCurrrent_32)
    RETURN()
mod_motor_read_4c:
    CALL(modMotorReadValue, 403, gModMotor4CCurrrent_32)
    CALL(setRet32AndKeep, gModMotor4CCurrrent_32)
    RETURN()
mod_motor_read_4d:
    CALL(modMotorReadValue, 404, gModMotor4DCurrrent_32)
    CALL(setRet32AndKeep, gModMotor4DCurrrent_32)
    RETURN()
}

subcall modMotorReadyBits {
    IN_32 pRegSrc_32
    DATA8 lLayer_8
    DATA8 lResult_8
    DATA8 lBit_8
    DATA8 lBits_8

    CALL(readMem8, pRegSrc_32, 0, lLayer_8)
    CALL(readMem8, pRegSrc_32, 1, lBits_8)

    JR_EQ8(lLayer_8, 0, mod_motor_ready_bits_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_ready_bits_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_ready_bits_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_ready_bits_layer4)
    RETURN()

mod_motor_ready_bits_layer1:
    MOVE8_8(gModMotor1AReady_8, lResult_8)
    MUL8(gModMotor1BReady_8, 2, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    MUL8(gModMotor1CReady_8, 4, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    MUL8(gModMotor1DReady_8, 8, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    AND8(lResult_8, lBits_8, lResult_8)
    JR_EQ8(lResult_8, lBits_8, mod_motor_ready_bits_ready1)
    CALL(setRet8AndKeep, 0)
    RETURN()
mod_motor_ready_bits_ready1:
    CALL(setRet8AndKeep, 1)
    RETURN()

mod_motor_ready_bits_layer2:
    MOVE8_8(gModMotor2AReady_8, lResult_8)
    MUL8(gModMotor2BReady_8, 2, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    MUL8(gModMotor2CReady_8, 4, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    MUL8(gModMotor2DReady_8, 8, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    AND8(lResult_8, lBits_8, lResult_8)
    JR_EQ8(lResult_8, lBits_8, mod_motor_ready_bits_ready2)
    CALL(setRet8AndKeep, 0)
    RETURN()
mod_motor_ready_bits_ready2:
    CALL(setRet8AndKeep, 0)
    RETURN()

mod_motor_ready_bits_layer3:
    MOVE8_8(gModMotor3AReady_8, lResult_8)
    MUL8(gModMotor3BReady_8, 2, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    MUL8(gModMotor3CReady_8, 4, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    MUL8(gModMotor3DReady_8, 8, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    AND8(lResult_8, lBits_8, lResult_8)
    JR_EQ8(lResult_8, lBits_8, mod_motor_ready_bits_ready3)
    CALL(setRet8AndKeep, 0)
    RETURN()
mod_motor_ready_bits_ready3:
    CALL(setRet8AndKeep, 0)
    RETURN()

mod_motor_ready_bits_layer4:
    MOVE8_8(gModMotor4AReady_8, lResult_8)
    MUL8(gModMotor4BReady_8, 2, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    MUL8(gModMotor4CReady_8, 4, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    MUL8(gModMotor4DReady_8, 8, lBit_8)
    OR8(lResult_8, lBit_8, lResult_8)
    AND8(lResult_8, lBits_8, lResult_8)
    JR_EQ8(lResult_8, lBits_8, mod_motor_ready_bits_ready4)
    CALL(setRet8AndKeep, 0)
    RETURN()
mod_motor_ready_bits_ready4:
    CALL(setRet8AndKeep, 0)
}

subcall modMotorReady {
    IN_32 pRegSrc_32
    DATA8 lLayer_8
    DATA8 lPort_8

    CALL(readMem8, pRegSrc_32, 0, lLayer_8)
    CALL(readMem8, pRegSrc_32, 1, lPort_8)

    JR_EQ8(lLayer_8, 0, mod_motor_ready_layer1)
    JR_EQ8(lLayer_8, 1, mod_motor_ready_layer2)
    JR_EQ8(lLayer_8, 2, mod_motor_ready_layer3)
    JR_EQ8(lLayer_8, 3, mod_motor_ready_layer4)
    RETURN()

mod_motor_ready_layer1:
    JR_EQ8(lPort_8, 0, mod_motor_ready_1a)
    JR_EQ8(lPort_8, 1, mod_motor_ready_1b)
    JR_EQ8(lPort_8, 2, mod_motor_ready_1c)
    JR_EQ8(lPort_8, 3, mod_motor_ready_1d)
    RETURN()
mod_motor_ready_1a:
    CALL(setRet8AndKeep, gModMotor1AReady_8)
    RETURN()
mod_motor_ready_1b:
    CALL(setRet8AndKeep, gModMotor1BReady_8)
    RETURN()
mod_motor_ready_1c:
    CALL(setRet8AndKeep, gModMotor1CReady_8)
    RETURN()
mod_motor_ready_1d:
    CALL(setRet8AndKeep, gModMotor1DReady_8)
    RETURN()

mod_motor_ready_layer2:
    JR_EQ8(lPort_8, 0, mod_motor_ready_2a)
    JR_EQ8(lPort_8, 1, mod_motor_ready_2b)
    JR_EQ8(lPort_8, 2, mod_motor_ready_2c)
    JR_EQ8(lPort_8, 3, mod_motor_ready_2d)
    RETURN()
mod_motor_ready_2a:
    CALL(setRet8AndKeep, gModMotor2AReady_8)
    RETURN()
mod_motor_ready_2b:
    CALL(setRet8AndKeep, gModMotor2BReady_8)
    RETURN()
mod_motor_ready_2c:
    CALL(setRet8AndKeep, gModMotor2CReady_8)
    RETURN()
mod_motor_ready_2d:
    CALL(setRet8AndKeep, gModMotor2DReady_8)
    RETURN()

mod_motor_ready_layer3:
    JR_EQ8(lPort_8, 0, mod_motor_ready_3a)
    JR_EQ8(lPort_8, 1, mod_motor_ready_3b)
    JR_EQ8(lPort_8, 2, mod_motor_ready_3c)
    JR_EQ8(lPort_8, 3, mod_motor_ready_3d)
    RETURN()
mod_motor_ready_3a:
    CALL(setRet8AndKeep, gModMotor3AReady_8)
    RETURN()
mod_motor_ready_3b:
    CALL(setRet8AndKeep, gModMotor3BReady_8)
    RETURN()
mod_motor_ready_3c:
    CALL(setRet8AndKeep, gModMotor3CReady_8)
    RETURN()
mod_motor_ready_3d:
    CALL(setRet8AndKeep, gModMotor3DReady_8)
    RETURN()

mod_motor_ready_layer4:
    JR_EQ8(lPort_8, 0, mod_motor_ready_4a)
    JR_EQ8(lPort_8, 1, mod_motor_ready_4b)
    JR_EQ8(lPort_8, 2, mod_motor_ready_4c)
    JR_EQ8(lPort_8, 3, mod_motor_ready_4d)
    RETURN()
mod_motor_ready_4a:
    CALL(setRet8AndKeep, gModMotor4AReady_8)
    RETURN()
mod_motor_ready_4b:
    CALL(setRet8AndKeep, gModMotor4BReady_8)
    RETURN()
mod_motor_ready_4c:
    CALL(setRet8AndKeep, gModMotor4CReady_8)
    RETURN()
mod_motor_ready_4d:
    CALL(setRet8AndKeep, gModMotor4DReady_8)
    RETURN()
}

subcall modMotorResetMotor {
    IN_32  pPort_32
    DATA8  lLayer_8
    DATA8  lBitfield_8
    DATA8  lInverted_8
    DATA32 lPort_32

    PORT_CNV_OUTPUT(pPort_32, lLayer_8, lBitfield_8, lInverted_8)
    OUTPUT_RESET(lLayer_8, lBitfield_8)
    OUTPUT_CLR_COUNT(lLayer_8, lBitfield_8)
}

subcall modMotorStopMotor {
    IN_32  pPort_32
    IN_8   pBrake_8
    DATA8  lLayer_8
    DATA8  lBitfield_8
    DATA8  lInverted_8

    PORT_CNV_OUTPUT(pPort_32, lLayer_8, lBitfield_8, lInverted_8)
    OUTPUT_STOP(lLayer_8, lBitfield_8, pBrake_8)
}

subcall modMotorReadValue {
    IN_32 pPort_32
    IO_32 pMotorPos_32
    DATAF lMotorPos_F
    DATA8 lLayer_8
    DATA8 lBitfield_8

    PORT_CNV_INPUT(pPort_32, lLayer_8, lBitfield_8)
    ADD8(lBitfield_8, 16, lBitfield_8)
    INPUT_DEVICE(READY_SI, lLayer_8, lBitfield_8, 0, 0, 1, lMotorPos_F)
    JR_NAN(lMotorPos_F, nan)

    MOVE32_F(pMotorPos_32, lMotorPos_F)
nan:
}

subcall modMotorOnMotor {
    IN_32  pPort_32
    IN_8   pSpeed_8
    DATA8  lLayer_8
    DATA8  lBitfield_8
    DATA8  lInverted_8

    PORT_CNV_OUTPUT(pPort_32, lLayer_8, lBitfield_8, lInverted_8)
    OUTPUT_SPEED(lLayer_8, lBitfield_8, pSpeed_8)
    OUTPUT_START(lLayer_8, lBitfield_8)
}
